name: Integration Tests
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '0 1 * * 1-5' # run integration tests at 1 AM (UTC), monday to friday (1-5)

  workflow_dispatch: # run integration tests only when triggered manually
    inputs:
      branch:
        description: 'Take CI build artifacts from branch (e.g., main, release-x.y.z)'
        required: true
        default: 'main'
      deleteOnFinish:
        type: boolean
        required: false
        description: "Check this if you don't want the test namespaces to stay alive after the test run"
        default: false
defaults:
  run:
    shell: bash
jobs:
  integration-test:
    name: "Tests"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - CLOUD_PROVIDER: "k3s-on-GHA"
            PLATFORM_VERSION: "v1.22.8+k3s1" # see https://github.com/rancher/k3s/releases
            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            COLLECT_RESOURCE_LIMITS: "false"
            USE_RESOURCE_SERVICE_DIRECTORY: "false"
          - CLOUD_PROVIDER: "k3s-on-GHA"
            PLATFORM_VERSION: "v1.24.4+k3s1" # see https://github.com/rancher/k3s/releases
            KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            COLLECT_RESOURCE_LIMITS: "false"
            USE_RESOURCE_SERVICE_DIRECTORY: "true"
          - CLOUD_PROVIDER: "k3d-on-GHA"
            PLATFORM_VERSION: "v5.4.6" # see https://github.com/k3d-io/k3d/releases
            KUBECONFIG: ""
            PLATFORM: "kubernetes"
            KEPTN_SERVICE_TYPE: "NodePort"
            RUN_AIRGAPPED_TEST: "true"
            COLLECT_RESOURCE_LIMITS: "false"
            USE_RESOURCE_SERVICE_DIRECTORY: "false"
#          - CLUSTER_NAME: "keptn-integration-tests-1"
#            CLOUD_PROVIDER: "GKE"
#            PLATFORM_VERSION: "1.22"
#            KUBECONFIG: ""
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "LoadBalancer"
#            COLLECT_RESOURCE_LIMITS: "false"
#            USE_RESOURCE_SERVICE_DIRECTORY: "false"
#          - CLUSTER_NAME: "keptn-integration-tests-2"
#            CLOUD_PROVIDER: "GKE"
#            PLATFORM_VERSION: "1.24"
#            KUBECONFIG: ""
#            PLATFORM: "kubernetes"
#            KEPTN_SERVICE_TYPE: "LoadBalancer"
#            COLLECT_RESOURCE_LIMITS: "true"
#            USE_RESOURCE_SERVICE_DIRECTORY: "true"

    env:
      CLOUD_PROVIDER: ${{ matrix.CLOUD_PROVIDER }}
      PLATFORM: ${{ matrix.PLATFORM }}
      PLATFORM_VERSION: ${{ matrix.PLATFORM_VERSION }}
      KUBECONFIG: ${{ matrix.KUBECONFIG }}
      KEPTN_NAMESPACE: "keptn-test-${{ github.run_number }}-${{ github.run_attempt }}"
      KEPTN_SERVICE_TYPE: ${{ matrix.KEPTN_SERVICE_TYPE }}
      RUN_AIRGAPPED_TEST: ${{ matrix.RUN_AIRGAPPED_TEST }}
      AIRGAPPED_REGISTRY_URL: "k3d-container-registry.localhost:12345"
      COLLECT_RESOURCE_LIMITS: ${{ matrix.COLLECT_RESOURCE_LIMITS }}
      GO_VERSION: "~1.18"
      TEST_REPORT_FOLDER: test-reports-${{ matrix.CLOUD_PROVIDER}}-${{ matrix.PLATFORM_VERSION }}
      FINAL_TEST_REPORT_FOLDER: test-reports
      FINAL_TEST_REPORT_PATH: test-reports/test-report-final-${{ matrix.CLOUD_PROVIDER}}-${{ matrix.PLATFORM_VERSION }}.log
      TEST_REPORT_FILENAME_SUFFIX: test-report-${{ github.run_id }}-${{ matrix.PLATFORM }}-${{ matrix.CLOUD_PROVIDER}}-${{ matrix.PLATFORM_VERSION }}.log
    outputs:
      BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
      ARTIFACT_RUN_ID: ${{ steps.last_run_id.outputs.RUN_ID }}
    steps:
      #######################################################################
      # SETUP
      #######################################################################
      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code.
        uses: actions/checkout@v3

      - name: Create downloads folder
        run: mkdir ~/downloads

      - name: Cache downloads paths
        uses: actions/cache@v3.0.11
        with:
          path: ~/downloads
          key: ${{ runner.os }}-${{ matrix.CLOUD_PROVIDER }}-downloads

      # This step is supposed to determine the target branch where to download the build-artifacts from
      - name: Determine Target Branch for Integration Tests
        id: determine_branch
        run: |
          if [[ "${{ github.event.inputs.branch }}" != "" ]]; then
            # branch was manually set by user -> probably a workflow_dispatch action
            BRANCH=${{ github.event.inputs.branch }}
            echo "Using $BRANCH as target branch for integration tests"
          else
            echo "Determining branch based on what triggered this workflow"

            if [[ "${GITHUB_REF}" == "refs/heads"* ]]; then
              echo "This is a push to a local branch -> using branch name"
              BRANCH=${GITHUB_REF#refs/heads/}
              echo "Branch Name: $BRANCH"
            else
              if [[ "${GITHUB_REF}" == "refs/pull/"* ]]; then
                # usually the format for PRs is: refs/pull/1234/merge
                echo "::error::This is a Pull Request, and PRs are not supported yet"
                exit 1
              else
                echo "::error This is neither a push, nor a PR, probably something else... Exiting"
                exit 1
              fi
            fi
          fi

          echo "BRANCH=$(echo ${BRANCH})" >> $GITHUB_OUTPUT

      - name: Find latest successful run ID
        id: last_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_SLUG: "keptn/lifecycle-controller"
          BRANCH: ${{ steps.determine_branch.outputs.BRANCH }}
        run: |
          RUN_ID=$(\
            curl -sL \
              -H 'Accept: application/vnd.github.v3+json' \
              -H "Authorization: token $GITHUB_TOKEN" \
              "api.github.com/repos/$REPO_SLUG/actions/workflows/CI.yml/runs?branch=$BRANCH" | \
            jq '[.workflow_runs[] | select(
              (.head_commit != null) and (.head_commit.author.name | endswith("[bot]") | not ) and ( .conclusion == "success" ) 
            )][0] | .id')
          echo "Run ID that will be used to download artifacts from: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT

      # download artifacts from the specified branch with event type push (e.g., push to master/release branch)
      - name: Download all artifacts from last successful build of specified branch
        uses: dawidd6/action-download-artifact@v2.24.0
        id: download_artifacts_push
        with:
          # Download last successful artifact from a CI build
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: CI.yml
          run_id: ${{ steps.last_run_id.outputs.RUN_ID }}
          # directory where to extract artifacts to
          path: ./dist    

      # setup cloud provider kubernetes instance
      - name: Install and start K3s
        if: env.CLOUD_PROVIDER == 'k3s-on-GHA'
        env:
          K3S_VERSION: ${{ matrix.PLATFORM_VERSION }}
        run: |
          test/utils/download_and_install_k3s.sh
          test/utils/k3s_create_cluster.sh

      - name: Install and start K3d
        if: env.CLOUD_PROVIDER == 'k3d-on-GHA'
        timeout-minutes: 10
        env:
          K3D_VERSION: ${{ matrix.PLATFORM_VERSION }}
        run: |
          test/utils/download_and_install_k3d.sh

          # create registry and cluster
          k3d registry create container-registry.localhost --port 12345
          k3d cluster create mykeptn --k3s-arg "--no-deploy=traefik@server:*" --agents 1 --k3s-arg "--no-deploy=servicelb@server:*" --k3s-arg "--kube-proxy-arg=conntrack-max-per-core=0@server:*" --registry-use "$AIRGAPPED_REGISTRY_URL"
          kubectl config use-context k3d-mykeptn

      - name: Install cert-manager
        run: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.0/cert-manager.yaml

      - name: Install keptn-lifecycle-controller
        run: | 
          sleep 10
          kubectl apply -f ./dist/keptn-lifecycle-operator-manifest
          kubectl apply -f ./dist/scheduler-manifest
          